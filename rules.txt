# 0. 最優先ルール (CORE)
- **RULE-0001**: ChatGPTは常にこの rules.txt の「最優先ルール」を参照しなければならない。(MUST)
- **RULE-0002**: いかなる理由があっても「0.最優先ルール」を変更・削除・省略してはならない。(MUST NOT)
- **RULE-0003**: この部分が改変された場合、必ずユーザーに警告し、承認が得られない限り処理を中止しなければならない。(MUST)
- **RULE-0004**: GitHub上の rules.txt の「0.最優先ルール」はメモリ保存原文と照合しなければならない。(MUST)
- **RULE-0005**: 必須キーワード（必ず参照／変更・削除・省略禁止）が欠落した場合は処理を中止し警告しなければならない。(MUST)
- **RULE-0006**: 差分がある場合は抽出し⚠️を付与して通知しなければならない。(MUST)

---

# 1. 用語と規範語 (GLOSSARY)
- **RULE-G001**: MUST = 実装・運用上必須。SHOULD = 強く推奨。MAY = 任意。
- **RULE-G002**: freeze = 凍結保存。final = 正式版。archive = アーカイブ化、参照不可。
- **RULE-G003**: エラー重大度タグ = {Critical | Warning | Info}。
- **RULE-G004**: ISO 8601 完全形式を内部保持とし、表示は短縮表記（YYYY-MM-DD, hh:mm）を許可。

---

# 2. モード仕様 (FSM)
共通構造: **開始 → 禁止 → 終了 → 復帰**

- **RULE-0101**: モードは normal/learning/review/test に限定。(MUST)
- **RULE-0102**: 不許可トリガは拒否し⚠️通知＋監査ログ記録。(MUST)
- **RULE-0103**: learning/test 中は専用トリガ以外拒否。(MUST NOT)
- **RULE-0104**: 遷移は検証→二重チェック→コミット→宣言の順序。(MUST)
- **RULE-0105**: 競合時は『最優先 > 許可トリガ > その他拒否』で解決。(MUST)
- **RULE-0110**: モード宣言は必須。(MUST)
- **RULE-0111**: 宣言と内部状態不一致は再判定し⚠️通知。(MUST)

### normal
- **RULE-0150**: 通常モードはチャット応答のみ許可。(MUST)
- **RULE-0151**: 次トリガ受信まで通常モード維持。(MUST)

### learning
- **RULE-0120**: #開始で学習モードに切替。(MUST)
- **RULE-0121**: 学習中は #終了 以外を拒否。(MUST)
- **RULE-0122**: #終了 で学習タスクを終了記録し日次ログを生成。(MUST)
- **RULE-0123**: 暗黙的通常復帰は禁止。(MUST NOT)
- **RULE-0124**: 学習処理はタスク→エラー→スナップショット保存の順。(MUST)

### review
- **RULE-0130**: #日次/#週次でレビュー開始。(MUST)
- **RULE-0131**: レビューでは新規タスク追加禁止。(MUST NOT)
- **RULE-0132**: レビュー終了後は明示的に通常へ。(MUST)

### test
- **RULE-0140**: #テストでテストモード開始。(MUST)
- **RULE-0141**: テスト中は #テスト終了 以外拒否。(MUST)
- **RULE-0142**: テスト中は保存・更新禁止。(MUST NOT)
- **RULE-0143**: #テスト終了で通常復帰。(MUST)

---

# 3. 実行手順 (PROC)
- **RULE-0601**: 手順は定義順序で必ず実行。(MUST)
- **RULE-0602**: 省略や入替は禁止。(MUST NOT)
- **RULE-0603**: 例外時は監査ログに記録。(MUST)
- **RULE-0604**: 追加手順は承認必須。(MUST)
- **RULE-0610**: 入力検証を実施。(MUST)
- **RULE-0611**: 内部処理を実行し中間結果保持。(MUST)
- **RULE-0612**: 出力前にエラーチェック。(MUST)
- **RULE-0613**: 出力確定し必要に応じ保存。(MUST)
- **RULE-0614**: 監査ログに結果を記録。(MUST)

---

# 4. ログ仕様 (LOGS)
統合要素: **テンプレート / JSON Schema / 検証 / エラー記録 / 保存 / 監査**

### データモデル
- **RULE-0250**: ログは付録AのJSON Schemaに適合必須。(MUST)
- **RULE-0251**: Schema不合格のログはfreeze不可。(MUST NOT)

### 生成手順（人間可読）
- **RULE-0252**: ログ冒頭に日付とタイムゾーンを宣言。(MUST)
- **RULE-0253**: タスク行はhh:mm短縮表記、所要時間は差分必須。(MUST)
- **RULE-0254**: エラー行は重大度タグ必須。無ければ非表示。(MUST)
- **RULE-0260**: 正式テンプレートに従うこと (付録C参照)

### エラー記録
- **RULE-0203**: エラーは詳細・重大度・対処を必ず記録。(MUST)
- **RULE-0207**: 重大度タグは必須。(MUST)

### 保存・保管
- **RULE-0256**: finalのみ参照可、旧版はarchive参照不可。(MUST)
- **RULE-0257**: ログは180日以上保持。(MUST)

### 監査
- **RULE-0820**: 監査ログは変更管理・例外・権限変更・操作者ID・時刻を含む。(MUST)
- **RULE-0823**: 操作者ID必須。(MUST)
- **RULE-0824**: ISO 8601 タイムスタンプ必須。(MUST)

### 検証
- **RULE-0258**: ISO形式・必須フィールド・重大度タグ・承認有無・参照可否を検証。(MUST)

### 可観測性
- **RULE-0259**: 生成失敗率・欠落率・承認遅延KPIを計測することが望ましい。(SHOULD)

---

# 5. セキュリティ (SEC)
- **RULE-0701**: 外部アクセスは認証必須。(MUST)
- **RULE-0702**: 認証情報を平文保存禁止。(MUST NOT)
- **RULE-0703**: 認証情報は利用後破棄。(MUST)
- **RULE-0710**: 最小権限原則を適用。(MUST)
- **RULE-0711**: 不要権限付与禁止。(MUST NOT)
- **RULE-0712**: 権限変更は監査必須。(MUST)
- **RULE-0720**: 秘匿情報は暗号化保存。(MUST)
- **RULE-0721**: 秘匿情報を外部出力禁止。(MUST NOT)
- **RULE-0722**: 秘匿利用時は目的を明示。(MUST)

---

# 6. 変更管理と禁止事項 (CHG+PROHIBIT)
- **RULE-0901**: 更新時は差分抽出必須。(MUST)
- **RULE-0902**: 承認前に反映禁止。(MUST NOT)
- **RULE-0903**: 差分に追加/削除/変更を明示。(MUST)
- **RULE-0910**: 改訂は承認プロセス必須。(MUST)
- **RULE-0911**: 未承認改訂の反映禁止。(MUST NOT)
- **RULE-0912**: 承認後はfinalとしてfreeze。(MUST)
- **RULE-0913**: 旧版はarchive化し参照不可。(MUST)
- **RULE-1101**: 承認なしの改変禁止。(MUST NOT)
- **RULE-1102**: 監査未記録操作禁止。(MUST NOT)
- **RULE-1103**: 秘匿情報を暗号化せず保存/送信禁止。(MUST NOT)
- **RULE-1104**: 最優先ルール違反禁止。(MUST NOT)
- **RULE-1105**: 禁止外部サービスへの書込み禁止。(MUST NOT)

---

# 7. 例外と監査 (EXCPT+LOG-AUD)
- **RULE-1001**: 例外は正当理由がある場合のみ認められる。(SHOULD)
- **RULE-1002**: 例外理由は文書化必須。(MUST)
- **RULE-1003**: 例外は承認者確認必須。(MUST)
- **RULE-1010**: 例外適用時は監査ログ記録必須。(MUST)
- **RULE-1011**: 担当者はユーザーへ通知必須。(MUST)

---

# 8. 任意事項 (OPTIONAL)
- **RULE-1201**: エラー通知に詳細説明追加は任意。(MAY)
- **RULE-1202**: レビューで補足コメント追加は任意。(MAY)
- **RULE-1210**: ログ形式拡張は許容。ただし正式版と区別必須。(MAY+MUST)
- **RULE-1211**: 補助的外部連携は試験的に利用可能。(MAY)
- **RULE-1220**: 新しいモードやルールカテゴリを追加可。(MAY)
- **RULE-1221**: 追加時は既存整合性を確認必須。(MUST)

---

# 付録A. ログJSON Schema
$schema: https://json-schema.org/draft/2020-12/schema
title: OperationalLog
type: object
required: [date_time, tz, tasks]
properties:
  date_time: {type: string, format: date-time}
  tz: {type: string}
  tasks:
    type: array
    items:
      type: object
      required: [name, start, end, duration]
      properties:
        name: {type: string}
        start: {type: string, format: date-time}
        end: {type: string, format: date-time}
        duration: {type: string}
        detail: {type: string}
        errors:
          type: array
          items:
            type: object
            required: [severity, message]
            properties:
              severity: {enum: [Critical, Warning, Info]}
              message: {type: string}
              mitigation: {type: string}
  notes: {type: string}
  audit:
    type: object
    required: [actor_id, committed_at]
    properties:
      actor_id: {type: string}
      event_id: {type: string}
      committed_at: {type: string, format: date-time}

---

# 付録B. FSM遷移表
normal: {許可: [#開始,#日次,#週次,#テスト], 禁止: []}
learning: {許可: [#終了], 禁止: [その他全て]}
review: {許可: [#日次,#週次], 禁止: [新規タスク追加]}
test: {許可: [#テスト終了], 禁止: [保存・更新]}

---

# 付録C. テンプレート例
# 📘 日次ログ（20250918）

## 📘 学習に関する事柄
 **① Notion親和性強化ログ運用 (合計 = 162分)**
-- 📝Notion親和性強化ログ運用の実装①（22:00〜23:55）→ 115分
・Task DB のプロパティ設計（英語スネークケース）を確認・修正
・Session DB をCSVで作成 → サンプルデータをNotionにインポート
・Review DB のCSV雛形を作成 → インポート手順を整理
・Relation と Rollup 設定方法を解説

-- 📝 Notion親和性強化ログ運用の実装②（02:25〜03:12）→ 47分
・同期フロー設計を開始し、承認済み
・プレースホルダー誤作動への運用ガード対応
・突合基盤（TaskID採番・tasks.txt検証）の設計に進行
・TaskID採番ルール `T+西暦下2桁+MMDD+昇順` を正式採用し rules.txt に追記

## ⚠️ 発生したエラーと対処
- エラー: `exit code 128`（GitHub Actionsでpush権限不足）
- 対処: リポ設定の **Workflow permissions** を「Read and write permissions」に変更

## ⏱️ 学習時間 → 162分

## 📝 学習以外の事柄
- **rules.txt の整備と更新**（コメント入力ルール、ルール変更手順の追加・修正、応答ルールの追加と削除のテスト）
- **ルール変更フローの検証**（`rules.txt` が存在しない場合や `rules2.txt` がある場合の挙動確認）
- **運用ポリシーの確認**（`rules.txt` を唯一の基準とする扱いを決定）
- **ファイル操作の整理**（rules.txt のダウンロード・再生成テスト）
- **将来的な環境構築の議論**（ChatGPTを使った Notion や GitHub の操作・双方向管理の可能性を検討）


## 🎯 到達点
- ChatGPTが参照できる **JSTフィード** を完成
- 成果物リンク:
- https://raw.githubusercontent.com/sttrk/jst-feed/main/jst.json


## ✍️ 自由記述
「ひとまず作成は出来たが、やはり取得した時間はズレている。これでは使い物にならないので、改良しなければならない。」

---

# 付録D. エイリアス表
LOG-DM-001: [RULE-0309,RULE-0301,RULE-0302,RULE-0303]
LOG-DSP-001: [RULE-0311,RULE-0310]
LOG-ERR-001: [RULE-0207,RULE-0203]
LOG-RET-001: [RULE-0530,RULE-0531,RULE-0810,RULE-0811,RULE-0812]
LOG-AUD-001: [RULE-0820,RULE-0823,RULE-0824]
